{"name":"Game Rankings","tagline":"Shows rankings for a game.","body":"# Game Rankings\r\n\r\n## Github Pages\r\nYou can view the Github page here: https://loganrickert.github.io/PHP-Game-Ranking/\r\n\r\n## Setting up config files\r\nThere are two configuration files you need to change. The first is the .htaccess in the root directory. Rename the file from .htaccess.example to .htaccess. You should see this line near the top:\r\n\r\n```\r\nRewriteCond %{HTTPS} !^on$\r\nRewriteRule (.*) https://localhost/$1 [R,L]\r\n```\r\n\r\nIf you will be running the website on HTTPS, keep this line and change ```https://localhost/$1``` to reflect the directory (If you are in html/ctf, change to https://localhost/ctf/$1). You should also replace localhost with your domain name or IP.\r\n\r\nYou should also rename the file Constants.php.example to Constants.php and change the following lines:\r\n\r\n```\r\ndefine(\"SITE_ROOT\", \"http://localhost\");\r\n\r\ndefine(\"SITE_NAME\", \"Rankings\");\r\n```\r\n\r\nThe Site name is the name of the site and the site root is the URL to the site. Do not include the trailing slash for the site root.\r\n\r\n## Setting up SQL database\r\nThe SQL was written for MySQL. To set up the database from PHPMyAdmin, goto PHPMyAdmin, click on the 'SQL' tab, and paste in the contents of the file DatabaseCreate and press go in the bottom right-hand corner.\r\n\r\nTo enter the SQL information, goto src/Constants and change the information:\r\n\r\n```\r\ndefine(\"DB_HOST\",\"localhost\");\r\ndefine(\"DB_NAME\",\"db_name\");\r\ndefine(\"DB_USER\",\"db_user\");\r\ndefine(\"DB_PASSWORD\",\"db_password\");\r\n```\r\n\r\nThe SQL database user only needs SELECT, UPDATE and INSERT. The JOIN, SUM and COUNT commands are also used.\r\n\r\n## Basics\r\n#### Defaults\r\n* You can create accounts\r\n* You can log into accounts\r\n* You can log out of accounts\r\n* You can create a team\r\n* You can leave a team\r\n* You can join a team\r\n* You can view a team page which has the team name, points, and list of team mates\r\n* You can view a player page which has their name and what team they are apart of.\r\n* If you create a team, you are the leader of the team\r\n* If the team is empty and you join, you are the leader of the team\r\n* If you are the team leader, you can kick people from the team\r\n* If you are the team leader, you can promote another team member to leader (You lose your leader position).\r\n* The site uses a .htaccess that uses clean URLs.\r\n\r\n#### Admins\r\n* Admins can kick anyone from any team and promote anyone to team leader\r\n* Admins can see a list of challenges\r\n* Admins can change the name, password or point amount for challenges. (view challenges.php)\r\n* Admins can create a new challenges\r\n* Admins can delete challenges (This actually just sets event_id = -1)\r\n\r\n## Permissions\r\nYou can find these options in src/Constants.php. The default group for a new account is 1.\r\n\r\nIf you would like for groups to have a custom link color, create an entry in the groups table and change the colors entry.\r\n\r\nMore groups can be defined, such as moderators, staff, etc. If a boolean is set to false, it is disabled for all groups, no matter what.\r\n\r\n```\r\n// The Player Group\r\ndefine(\"PLAYER_GROUP\", 1);\r\n\r\n// The admin group\r\ndefine(\"ADMIN_GROUP\", 2);\r\n\r\n// Admins\r\nconst canCreateChallenges = array(ADMIN_GROUP);\r\nconst canViewChallengeInfo = array(ADMIN_GROUP);\r\nconst canUpdateChallengeInfo = array(ADMIN_GROUP);\r\nconst canDeleteChallenge = array(ADMIN_GROUP);\r\nconst canViewChallengePassword = array(ADMIN_GROUP);\r\nconst canKickAnyone = array(ADMIN_GROUP);\r\nconst canMakeAnyoneLeader = array(ADMIN_GROUP);\r\n\r\n// Admins and Players\r\nconst canJoinTeam = array(PLAYER_GROUP, ADMIN_GROUP);\r\nconst canCreateTeam = array(PLAYER_GROUP, ADMIN_GROUP);\r\nconst canLeaveTeam = array(PLAYER_GROUP, ADMIN_GROUP);\r\nconst canKick = array(PLAYER_GROUP, ADMIN_GROUP);\r\nconst canMakeLeader = array(PLAYER_GROUP, ADMIN_GROUP);\r\nconst canSubmitPasswords = array(PLAYER_GROUP, ADMIN_GROUP);\r\n\r\ndefine(\"SIGNUP_ENABLED\", true);\r\ndefine(\"SIGNIN_ENABLED\", true);\r\ndefine(\"JOIN_TEAM_ENABLED\", true);\r\ndefine(\"CREATE_TEAM_ENABLED\", true);\r\ndefine(\"TEAM_KICKING\", true);\r\ndefine(\"LEAVE_TEAM_ENABLED\", true);\r\ndefine(\"CAN_MAKE_LEADER_ENABLED\", true);\r\ndefine(\"CAN_SUBMIT_PASSWORDS\", true);\r\ndefine(\"VIEW_CHALLENGES_ENABLED\", true);\r\n```\r\n\r\n## Walk Through\r\nThe website is written with PHP classes. There are three main classes: Player, Event and Team.\r\n\r\n```\r\nprivate $teamId; \t\t// The identification number for the team. This number is unique.\r\nprivate $teamName; \t\t// The name of the team. This is unique.\r\nprivate $teamPoints;\t// The number of points a team has. This row is no longer used.\r\n\t\t\t\t\t\t// Instead, points_obtained where team_id = teamId are summed together.\r\nprivate $teamLeader;\t// Indicates who the team leader is by playerId.\r\nprivate $teamStatus;\t// Not yet used for anything. Thinking about is_banned, is_playing, etc.\r\n```\r\n\r\n```\r\nprivate $playerId;\t\t// The identification number for a player. This number is unique.\r\nprivate $playerName;\t// The name of the player. This name is unique.\r\nprivate $playerEmail;\t// Email of the player. This email is a valid email. This email is unique. This field currently has no uses.\r\nprivate $playerPassword;// The hashed password of the player. Hashed using bcrypt.\r\nprivate $teamId;\t\t// The id of the team the player is on. teamId 0 means no team.\r\nprivate $playerStatus;\t// The Not yet used for anything. Thinking about is_banned, is_playing, etc.\r\nprivate $groupId;\t\t// The group id of the player.\r\n```\r\n\r\n```\r\nprivate $pointId;\t\t// The identification of the event\r\nprivate $pointPassword;\t// The password that corrisponds to the event. This password is stored in plain text.\r\nprivate $pointAmount;\t// The amount of points the event is worth\r\nprivate $pointEvent;\t// The id of the overall event that the site is currently on. Integer value.\r\nprivate $eventName;\t\t// The name of the event.\r\n```\r\n\r\n#### Create Event:\r\nTo create a new event, first create an account. Manually set the group_id for that user to the group_id of the admin group inside of the SQL database. Back at the website, at the very top right hand corner, click on 'Events'. If any events have already been created, you will see them listed here. You can very easily edit any event and click the submit button to save the changes. Click on 'create new event'. Type in the information. Once done, click submit. Your event has now been added to the unlockable event list.\r\n\r\n#### Unlock Event:\r\nTo unlock an event, go to the sub header bar and click on the 'enter password' input box. Type in a password and press enter. If the password is in the events list and the team you are in has not already activated the password, the team will unlock the event. This will add a row into the points_obtained table, recording which event was unlocked, by whom, by which team, and the unix ephoch time it was unlocked.\r\n\r\nTo create an instance of a class, do the following:\r\n\r\n```\r\n$player = new Player($playerId, $playerName, $playerEmail, $teamId, $playerStatus, $groupId);\r\n```\r\n\r\nTo get information from the class, you must call a getter. To do this do:\r\n\r\n```\r\n$player->getPlayerId();\r\n```\r\n\r\nNote: Some getters may not be there as I haven't needed them. Just copy / paste an existing one if you find yourself needing one.\r\n\r\nThere is almost no need to create a player or team instance manually. You can just call ```$db->loadPlayer($playerId)``` or ```$db->loadTeam($teamId)``` and it will return an instance ready to use.\r\n\r\n```\r\n$db = new Database();\r\n$player = $db->loadPlayer($playerId);\r\n```\r\n\r\nThere are a lot of functions in the Database class. Most could be removed and probably will be. Right now every function is being used somewhere but I am going to remove functions that don't need to be there and can be done using the loadPlayer or loadTeam.\r\n\r\nAll HTML is inside the Html class. Please do not place any HTML inside of any other classes.\r\n\r\nThe following is an example of a page that displays the header, footer and displays a simple message:\r\n\r\n```\r\n<?PHP\r\n\r\ninclude './src/Constants.php';\r\ninclude './autoloader.php';\r\n\r\n$html = new Html(\"Simple Message\");\r\n\r\n$html->printHeader();\r\n\r\necho \"Hello, how are you!\";\r\n\r\n$html->printFooter();\r\n```\r\n\r\nThe autoloader is a class that automatically loads a class when you use it. Without this, you would have to include every php class file every time. The literal passed into the HTML class is what the title of the HTML page will be set to.\r\n\r\nOnly two things are stored in SESSION: playerName and playerId.\r\n\r\n## Naming Conventions\r\nPHP files that output HTML should be lowercase with underscores for spaces. PHP files that are used as scripts should be camel casing. PHP varibles should be camel casing. SQL names should be lowercase with underscores for spaces. PHP classes should start with an uppercase and be camel casing. Here are some examples:\r\n\r\n```\r\n$thisIsANumber\r\ndeleteAllUsers.php\r\nview_all_users.php\r\nMySuperCoolClass.php\r\nplayer_coolness (SQL name)\r\n```\r\n\r\n## Plans\r\nNot too sure yet.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}